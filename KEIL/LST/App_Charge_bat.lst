C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE APP_CHARGE_BAT
OBJECT MODULE PLACED IN .\Output\App_Charge_bat.obj
COMPILER INVOKED BY: C:\Keil_MDK\C51\BIN\C51.EXE ..\Main\App_Charge_bat.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Library;..\
                    -Main;..\Library\Device\Include;..\Main\0AC) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\App_Charge_bat.lst) TABS(
                    -2) OBJECT(.\Output\App_Charge_bat.obj)

line level    source

   1          #include "includes.h"
   2          #include "App_Charge_bat.h"
   3          #include "Sys_Adc.h"
   4          #include "Sys_Init.h"
   5          #include "App_Key.h"
   6          #include "App_pwr_off.h"
   7          #include "App_BT_Uart0.h"
   8          
   9          //*5ms
  10          #define c_ucDisp_time         100
  11          #define c_ucTime_cnt_1S         200
  12          
  13          //*1S
  14          #define c_uwBat_Low_off_time    (15*60)   //
  15          
  16          #define c_uwEmr_writing_count_Time    29
  17          
  18          #define M_LED_PWR_LOW_ON()     {a_oLed_pwr_low=0;}
  19          #define M_LED_PWR_LOW_OFF()    {a_oLed_pwr_low=1;}
  20          #define M_LED_FULL_ON()     {a_oLed_full=0;}
  21          #define M_LED_FULL_OFF()    {a_oLed_full=1;}
  22          
  23          #define c_ucAdc_data_high_bat ((35*256)/(33*2)) //8bit adc,1/2
  24          #define c_ucAdc_data_low_bat  ((34*256)/(33*2)) //8bit adc,1/2
  25          
  26          
  27          typedef enum
  28          {
  29              E_LED_MODE_OFF = 0,
  30              E_LED_MODE_ON,
  31              E_LED_MODE_DISP,
  32          }T_LED_MODE;
  33          
  34          u8 ucDC_input;
  35          static u8 ucCHRG_full;
  36          u8 ucLed_mode_pwr_low;
  37          u8 ucLed_mode_pwr_low_bat;
  38          u8 ucLed_mode_full;
  39          u8 ucLed_mode_full_bat;
  40          
  41          extern u8 second_boot_sign;
  42          extern u8 ucBlue_sleep_mode;
  43          
  44          extern u8 ucLed_mode;
  45          extern u8 ucPwr_on_status;
  46          
  47          extern u8 bt_connection_status;
  48          extern u8 current_writing_status;
  49          
  50          extern u8 emr_writing_state;
  51          extern u16 emr_writing_count;
  52          extern u8 force_page_feed_current_state;
  53          
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 2   

  54          static u8 ucAdc_bat_data;
  55          
  56          u8 system_operation_status = 1;
  57          
  58          
  59          void App_charge_bat_init(void)
  60          {
  61   1          ucAdc_bat_data = 0xff;
  62   1          //M_LED_PWR_LOW_OFF();
  63   1          //M_LED_FULL_OFF();
  64   1        ucDC_input = 0;
  65   1        ucCHRG_full = 0;
  66   1          
  67   1          ucLed_mode_pwr_low = E_LED_MODE_OFF;
  68   1          ucLed_mode_pwr_low_bat = E_LED_MODE_OFF;
  69   1          ucLed_mode_full = E_LED_MODE_OFF; 
  70   1          ucLed_mode_full_bat = ucLed_mode_full;
  71   1      }
  72          
  73          static void bat_adc_data(void)
  74          {
  75   1          static xdata u8 ucTime = 0;
  76   1          static xdata u16 uwAdc_add = 0;
  77   1          static xdata u8 ucAdc_cnt = 0;
  78   1          u16 uwAdc_tmp;
  79   1      
  80   1          ucTime++;
  81   1          if(ucTime >= 40)
  82   1          {
  83   2              ucTime = 0;
  84   2              
  85   2            uwAdc_tmp = (Adc_Data_Get()>>4);   //8bit
  86   2      
  87   2              uwAdc_add += uwAdc_tmp;
  88   2              ucAdc_cnt++;
  89   2              if(ucAdc_cnt >= 8)
  90   2              {
  91   3                  ucAdc_cnt = 0;
  92   3      
  93   3                  ucAdc_bat_data = (u8)(uwAdc_add/8);
  94   3                  uwAdc_add = 0;
  95   3              }
  96   2          }
  97   1      }
  98          
  99          
 100          u8 DC_input_status(void)
 101          {
 102   1          return ucDC_input;
 103   1      }
 104          
 105          static void DC_input_check(void)
 106          {
 107   1          static xdata u8 ucInput_Time_cnt1 = 0;
 108   1          static xdata u8 ucInput_Time_cnt2 = 0;
 109   1        static xdata u8 ucCHRG_Time_cnt1 = 0;
 110   1          static xdata u8 ucCHRG_Time_cnt2 = 0;
 111   1          static xdata u16 uwBat_Low_off_time = 0;
 112   1          static xdata u8 ucTime_cnt_1S = 0;
 113   1      
 114   1          //
 115   1          if(pwr_on_status() != 1)
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 3   

 116   1          {
 117   2              if(0 == a_iDC_Input)
 118   2              {
 119   3                  //充电器接入
 120   3                  ucInput_Time_cnt2 = 0;
 121   3                  ucInput_Time_cnt1++;
 122   3                  if(ucInput_Time_cnt1 >= 50)
 123   3                  {
 124   4                      ucInput_Time_cnt1 = 0;
 125   4                      ucDC_input = 1;
 126   4                      //app_bt_shut_down_time_clr();        //接入充电器不让蓝牙15分钟关机
 127   4                  }
 128   3              }
 129   2              else
 130   2              {
 131   3                  //充电器拿开
 132   3                  ucInput_Time_cnt1 = 0;
 133   3                  ucInput_Time_cnt2++;
 134   3                  if(ucInput_Time_cnt2 >= 50)
 135   3                  {
 136   4                      ucInput_Time_cnt2 = 0;
 137   4                      ucDC_input = 0;
 138   4                  }
 139   3              }
 140   2            
 141   2            //
 142   2              if(1 == a_iCHRG_Check)
 143   2              {
 144   3                  //充电中
 145   3                  ucCHRG_Time_cnt2 = 0;
 146   3                  ucCHRG_Time_cnt1++;
 147   3                  if(ucCHRG_Time_cnt1 >= 50)
 148   3                  {
 149   4                      ucCHRG_Time_cnt1 = 0;
 150   4                      ucCHRG_full = 0;
 151   4                  }
 152   3              }
 153   2              else
 154   2              {
 155   3                  //充满
 156   3                  ucCHRG_Time_cnt1 = 0;
 157   3                  ucCHRG_Time_cnt2++;
 158   3                  if(ucCHRG_Time_cnt2 >= 50)
 159   3                  {
 160   4                      ucCHRG_Time_cnt2 = 0;
 161   4                      ucCHRG_full = 1;
 162   4                  }
 163   3              }
 164   2          }
 165   1        //判断充电状态
 166   1        if(1 == ucDC_input)
 167   1        {
 168   2              if((pwr_on_status() != 2) && (pwr_on_status() == 1))
 169   2                  return;     //开机状态返回
 170   2          //充电器接入
 171   2          if(1 == ucCHRG_full)
 172   2          {
 173   3            //充满
 174   3            if(ucPwr_on_status == 0 /*|| app_bt_power_led_status() == 1*/)
 175   3            {
 176   4                      a_oPwr_on = 0;
 177   4                      ucLed_mode = E_LED_MODE_OFF;
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 4   

 178   4                      ucLed_mode_full = E_LED_MODE_ON;
 179   4                      ucLed_mode_pwr_low = E_LED_MODE_OFF;
 180   4                      //if(system_operation_status == 1)
 181   4                      {
 182   5                          system_operation_status = 0;
 183   5                          //app_bt_system_shutdown();
 184   5                          a_oReset_BT=0;
 185   5                      }
 186   4                      return;
 187   4                  }
 188   3                  /*if(second_boot_sign == 1)
 189   3                  {
 190   3                      second_boot_sign = 0;
 191   3                      ucBlue_sleep_mode = 0;
 192   3                  }*/
 193   3                  if(1 == app_bt_power_led_status())
 194   3                  {
 195   4                      if(force_page_feed_current_state == 1)
 196   4                      {
 197   5                          force_page_feed_current_state = 0;
 198   5                      }
 199   4                      ucLed_mode = E_LED_MODE_OFF;
 200   4                      ucLed_mode_full = E_LED_MODE_ON;
 201   4                      ucLed_mode_pwr_low = E_LED_MODE_OFF;
 202   4                  }
 203   3                  else
 204   3                  {
 205   4                if(force_page_feed_current_state == 1)
 206   4                {
 207   5                          ucLed_mode_full_bat = E_LED_MODE_ON;
 208   5                          if(bt_connection_status == 1)
 209   5                          {
 210   6                              ucLed_mode_full = E_LED_MODE_OFF;
 211   6                          }
 212   5                          else if(bt_connection_status == 0)
 213   5                          {
 214   6                              //ucLed_mode = E_LED_MODE_ON;
 215   6                              ucLed_mode_full = E_LED_MODE_DISP;
 216   6                              current_writing_status = 0;
 217   6                              //bt_connection_status = 0;
 218   6                          }
 219   5                      }
 220   4                      else
 221   4                      {
 222   5                    ucLed_mode_full = E_LED_MODE_ON;      //绿led 常亮
 223   5                    emr_writing_count++;
 224   5                          if(emr_writing_count >= c_uwEmr_writing_count_Time)
 225   5                          {
 226   6                              emr_writing_count = c_uwEmr_writing_count_Time;
 227   6                              if(bt_connection_status == 1)
 228   6                              {
 229   7                                  ucLed_mode_full = E_LED_MODE_ON;
 230   7                                  return;
 231   7                              }
 232   6                              else
 233   6                              {
 234   7                                  ucLed_mode = E_LED_MODE_ON; 
 235   7                                  ucLed_mode_full = E_LED_MODE_ON;
 236   7                                  current_writing_status = 0;
 237   7                                  bt_connection_status = 0;
 238   7                              }
 239   6                    }
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 5   

 240   5                      }
 241   4                      ucLed_mode_pwr_low = E_LED_MODE_OFF;    //红led 关闭
 242   4                  }
 243   3          }
 244   2          else
 245   2          {
 246   3            //充电中
 247   3            if(ucPwr_on_status == 0 /*|| app_bt_power_led_status() == 1*/)
 248   3            {
 249   4                      a_oPwr_on = 0;
 250   4                      ucLed_mode = E_LED_MODE_OFF;
 251   4                      ucLed_mode_full = E_LED_MODE_OFF;
 252   4                      ucLed_mode_pwr_low = E_LED_MODE_ON;
 253   4                      //if(system_operation_status == 1)
 254   4                      {
 255   5                          system_operation_status = 0;
 256   5                          //app_bt_system_shutdown();
 257   5                          a_oReset_BT=0;
 258   5                      }
 259   4                      return;
 260   4                  }
 261   3                  /*if(second_boot_sign == 1)
 262   3                  {
 263   3                      second_boot_sign = 0;
 264   3                      ucBlue_sleep_mode = 0;
 265   3                  }*/
 266   3                  if(1 == app_bt_power_led_status())
 267   3                  {
 268   4                      if(force_page_feed_current_state == 1)
 269   4                      {
 270   5                          force_page_feed_current_state = 0;
 271   5                      }
 272   4                      ucLed_mode = E_LED_MODE_OFF;
 273   4                      ucLed_mode_full = E_LED_MODE_OFF;
 274   4                      ucLed_mode_pwr_low = E_LED_MODE_ON;
 275   4                  }
 276   3                  else
 277   3                  {
 278   4                      if(force_page_feed_current_state == 1)
 279   4                {
 280   5                          ucLed_mode_full_bat = E_LED_MODE_OFF;
 281   5                          //ucLed_mode_pwr_low_bat = E_LED_MODE_OFF;      //红led 关闭
 282   5                          ucLed_mode_pwr_low = E_LED_MODE_ON;
 283   5                          if(bt_connection_status == 1)
 284   5                          {
 285   6                              ucLed_mode_full = E_LED_MODE_OFF;
 286   6                          }
 287   5                          else if(bt_connection_status == 0)
 288   5                          {
 289   6                              //ucLed_mode = E_LED_MODE_ON;
 290   6                              ucLed_mode_full = E_LED_MODE_DISP;
 291   6                              current_writing_status = 0;
 292   6                              //bt_connection_status = 0;
 293   6                          }
 294   5                      }
 295   4                      else
 296   4                      { 
 297   5                          
 298   5                    ucLed_mode_full = E_LED_MODE_OFF;
 299   5                          emr_writing_count++;
 300   5                          if(emr_writing_count >= c_uwEmr_writing_count_Time)
 301   5                          {
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 6   

 302   6                              emr_writing_count = c_uwEmr_writing_count_Time;
 303   6                              if(bt_connection_status == 1)
 304   6                              {
 305   7                                  //ucLed_mode_pwr_low = E_LED_MODE_OFF;
 306   7                              }
 307   6                              else
 308   6                              {  
 309   7                                  ucLed_mode = E_LED_MODE_ON;
 310   7                                  ucLed_mode_pwr_low = E_LED_MODE_ON;
 311   7                                  current_writing_status = 0;
 312   7                                  bt_connection_status = 0;
 313   7                              }
 314   6                          }
 315   5                          else
 316   5                          {
 317   6                              
 318   6                              ucLed_mode_pwr_low = E_LED_MODE_ON;     //红led 关闭
 319   6                          }
 320   5                      } 
 321   4                  }
 322   3          }
 323   2      
 324   2              uwBat_Low_off_time = 0;
 325   2        }
 326   1        else
 327   1        {
 328   2          //充电器未接
 329   2          if(pwr_on_status() != 2)
 330   2                  return;     //开机状态返回
 331   2          
 332   2              ucCHRG_full = 0;
 333   2              if(force_page_feed_current_state == 1)
 334   2          {
 335   3                  ucLed_mode_full_bat = E_LED_MODE_OFF;
 336   3              }
 337   2              else
 338   2              {
 339   3              ucLed_mode_full = E_LED_MODE_OFF;
 340   3              } 
 341   2              if(ucAdc_bat_data > c_ucAdc_data_high_bat)
 342   2              {
 343   3                  //电量充足
 344   3                  ucLed_mode_pwr_low = E_LED_MODE_OFF;  //红led 关闭
 345   3                  
 346   3                  uwBat_Low_off_time = 0;
 347   3                  /*if(second_boot_sign == 1)
 348   3                  {
 349   3                      second_boot_sign = 0;
 350   3                      ucBlue_sleep_mode = 0;
 351   3                  }*/
 352   3                  if(1 == app_bt_power_led_status())
 353   3                  {
 354   4                      if(force_page_feed_current_state == 1)
 355   4                      {
 356   5                          force_page_feed_current_state = 0;
 357   5                      }
 358   4                      ucLed_mode = E_LED_MODE_OFF;
 359   4                      ucLed_mode_pwr_low = E_LED_MODE_OFF;
 360   4                      ucLed_mode_full = E_LED_MODE_OFF;
 361   4                  }
 362   3                  else
 363   3                  {
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 7   

 364   4                      emr_writing_count++;
 365   4                      if(emr_writing_count >= c_uwEmr_writing_count_Time)
 366   4                      {
 367   5                          emr_writing_count = c_uwEmr_writing_count_Time;
 368   5                          if(force_page_feed_current_state != 1)
 369   5                          {
 370   6                              if(bt_connection_status == 1)
 371   6                              {
 372   7                                  return;
 373   7                              }
 374   6                              else if(bt_connection_status == 0)
 375   6                              {
 376   7                                  ucLed_mode = E_LED_MODE_ON;
 377   7                                  ucLed_mode_full = E_LED_MODE_OFF;
 378   7                                  current_writing_status = 0;
 379   7                                  bt_connection_status = 0;
 380   7                              }
 381   6                              
 382   6                          }
 383   5                          else if(force_page_feed_current_state == 1)
 384   5                          {
 385   6                              if(bt_connection_status == 1)
 386   6                              {
 387   7                                  ucLed_mode_full = E_LED_MODE_OFF;
 388   7                              }
 389   6                              else if(bt_connection_status == 0)
 390   6                              {
 391   7                                  //ucLed_mode = E_LED_MODE_ON;
 392   7                                  ucLed_mode_full = E_LED_MODE_DISP;
 393   7                                  current_writing_status = 0;
 394   7                                  //bt_connection_status = 0;
 395   7                              }
 396   6                          }
 397   5                             
 398   5                      }
 399   4                  }
 400   3              }
 401   2              else if(ucAdc_bat_data < c_ucAdc_data_low_bat)
 402   2              {
 403   3                  //电量低
 404   3                  /*if(second_boot_sign == 1)
 405   3                  {
 406   3                      second_boot_sign = 0;
 407   3                      ucBlue_sleep_mode = 0;
 408   3                  }*/
 409   3                  if(1 == app_bt_power_led_status())
 410   3                  {
 411   4                      if(force_page_feed_current_state == 1)
 412   4                      {
 413   5                          force_page_feed_current_state = 0;
 414   5                      }
 415   4                      ucLed_mode = E_LED_MODE_OFF;
 416   4                      ucLed_mode_full = E_LED_MODE_OFF;
 417   4                      ucLed_mode_pwr_low = E_LED_MODE_OFF;
 418   4                  }
 419   3                  else
 420   3                  {
 421   4                      ucLed_mode_pwr_low = E_LED_MODE_DISP;
 422   4                      emr_writing_count++;
 423   4                      if(emr_writing_count >= c_uwEmr_writing_count_Time)
 424   4                      {
 425   5                          emr_writing_count = c_uwEmr_writing_count_Time;
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 8   

 426   5                          if(force_page_feed_current_state != 1)
 427   5                          {
 428   6                              if(bt_connection_status == 1)
 429   6                              {
 430   7                                  ucLed_mode_pwr_low = E_LED_MODE_DISP;
 431   7                                  return;
 432   7                              }
 433   6                              else if(bt_connection_status == 0)
 434   6                              {
 435   7                                  ucLed_mode_pwr_low = E_LED_MODE_DISP; //红led 慢闪
 436   7                                  ucLed_mode = E_LED_MODE_ON;
 437   7                                  current_writing_status = 0;
 438   7                                  bt_connection_status = 0;
 439   7                              }
 440   6                          }
 441   5                          else if(force_page_feed_current_state == 1)
 442   5                          {
 443   6                              if(bt_connection_status == 1)
 444   6                              {
 445   7                                  ucLed_mode_full = E_LED_MODE_OFF;
 446   7                              }
 447   6                              else if(bt_connection_status == 0)
 448   6                              {
 449   7                                  //ucLed_mode = E_LED_MODE_ON;
 450   7                                  ucLed_mode_full = E_LED_MODE_DISP;
 451   7                                  current_writing_status = 0;
 452   7                                  //bt_connection_status = 0;
 453   7                              }
 454   6                          }
 455   5                      }
 456   4                  }
 457   3                  //ucLed_mode_pwr_low = E_LED_MODE_DISP; //红led 慢闪
 458   3                  //if(force_page_feed_current_state != 1)
 459   3                  {
 460   4                      //ucLed_mode = E_LED_MODE_OFF;
 461   4                  }
 462   3                  //计时关闭
 463   3                  ucTime_cnt_1S++;
 464   3                  if(ucTime_cnt_1S >= c_ucTime_cnt_1S)
 465   3                  {
 466   4                      ucTime_cnt_1S = 0;
 467   4                      
 468   4                      uwBat_Low_off_time++;
 469   4                      if(uwBat_Low_off_time >= c_uwBat_Low_off_time)
 470   4                      {
 471   5                          uwBat_Low_off_time = 0;
 472   5      
 473   5                          app_bt_send_key_long(); //通知蓝牙准备关机，等待返回关闭命令
 474   5                          pwr_off_set();          //自身延时强制关机
 475   5                      }
 476   4                  }
 477   3              }
 478   2        }
 479   1      
 480   1      }
 481          
 482          void power_led(u8 status)
 483          {
 484   1          if(1 == status)
 485   1          {
 486   2              if(force_page_feed_current_state == 1)
 487   2              {
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 9   

 488   3                  force_page_feed_current_state = 0;
 489   3              }
 490   2              ucLed_mode = E_LED_MODE_ON;
 491   2              ucLed_mode_full = E_LED_MODE_OFF;
 492   2          }
 493   1          else
 494   1          {
 495   2              ucLed_mode = E_LED_MODE_OFF;
 496   2          }
 497   1      }
 498          
 499          static void led_ctrl(void)
 500          {
 501   1          static xdata u8 ucDisp_time_pwr_low = 0;
 502   1          static xdata u8 ucDisp_time_full = 0;
 503   1          static xdata u8 ucDisp_cpl_pwr_low = 0;
 504   1          static xdata u8 ucDisp_cpl_full = 0;
 505   1      
 506   1          switch(ucLed_mode_pwr_low)
 507   1          {
 508   2              case E_LED_MODE_OFF: //off
 509   2              {
 510   3                  M_LED_PWR_LOW_OFF();
 511   3                  ucDisp_time_pwr_low = 0;
 512   3                  ucDisp_cpl_pwr_low = 1;
 513   3              }break;
 514   2      
 515   2              case E_LED_MODE_ON: //on
 516   2              {
 517   3                  M_LED_PWR_LOW_ON();
 518   3                  ucDisp_time_pwr_low = 0;
 519   3                  ucDisp_cpl_pwr_low = 0;
 520   3              }break;
 521   2      
 522   2              case E_LED_MODE_DISP: //slow disp
 523   2              {
 524   3                  ucDisp_time_pwr_low++;
 525   3                  if(ucDisp_time_pwr_low >= c_ucDisp_time)
 526   3                  {
 527   4                      ucDisp_time_pwr_low = 0;
 528   4      
 529   4                      if(0 == ucDisp_cpl_pwr_low)
 530   4                      {
 531   5                          M_LED_PWR_LOW_OFF();
 532   5                          ucDisp_cpl_pwr_low = 1;
 533   5                      }
 534   4                      else
 535   4                      {
 536   5                          M_LED_PWR_LOW_ON();
 537   5                          ucDisp_cpl_pwr_low = 0;
 538   5                      }
 539   4                  }
 540   3              }break;
 541   2          }
 542   1      
 543   1          //
 544   1          switch(ucLed_mode_full)
 545   1          {
 546   2              case E_LED_MODE_OFF: //off
 547   2              {
 548   3                  M_LED_FULL_OFF();
 549   3                  ucDisp_time_full = 0;
C51 COMPILER V9.00   APP_CHARGE_BAT                                                        11/04/2020 15:29:22 PAGE 10  

 550   3                  ucDisp_cpl_full = 1;
 551   3              }break;
 552   2      
 553   2              case E_LED_MODE_ON: //on
 554   2              {
 555   3                  M_LED_FULL_ON();
 556   3                  ucDisp_time_full = 0;
 557   3                  ucDisp_cpl_full = 0;
 558   3              }break;
 559   2      
 560   2              case E_LED_MODE_DISP: //slow disp
 561   2              {
 562   3                  ucDisp_time_full++;
 563   3                  if(ucDisp_time_full >= c_ucDisp_time)
 564   3                  {
 565   4                      ucDisp_time_full = 0;
 566   4      
 567   4                      if(0 == ucDisp_cpl_full)
 568   4                      {
 569   5                          M_LED_FULL_OFF();
 570   5                          ucDisp_cpl_full = 1;
 571   5                      }
 572   4                      else
 573   4                      {
 574   5                          M_LED_FULL_ON();
 575   5                          ucDisp_cpl_full = 0;
 576   5                      }
 577   4                  }
 578   3              }break;
 579   2          }
 580   1      }
 581          
 582          
 583          void App_charge_bat_server(void)
 584          { 
 585   1          bat_adc_data();
 586   1          DC_input_check();
 587   1      
 588   1          if(2 == pwr_on_status() || 1 == DC_input_status())
 589   1          {
 590   2              led_ctrl();
 591   2          }
 592   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    985    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
