C51 COMPILER V9.60.0.0   APP_CHARGE_BAT                                                    03/08/2021 17:08:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE APP_CHARGE_BAT
OBJECT MODULE PLACED IN .\Output\App_Charge_bat.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Main\App_Charge_bat.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Library;..\M
                    -ain;..\Library\Device\Include;..\Main\0AC;..\Main) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\App_Charge_bat.lst
                    -) TABS(2) OBJECT(.\Output\App_Charge_bat.obj)

line level    source

   1          #include "includes.h"
   2          #include "App_Charge_bat.h"
   3          #include "Sys_Adc.h"
   4          #include "Sys_Init.h"
   5          #include "App_Key.h"
   6          #include "App_pwr_off.h"
   7          #include "App_BT_Uart0.h"
   8          #include "App_led.h"
   9          
  10          //*5ms
  11          #define c_ucTime_cnt_1S         200
  12          
  13          //*1S
  14          #define c_uwBat_Low_off_time    (30*60)   //
  15          
  16          
  17          #define c_ucAdc_data_high_bat ((35*256)/(33*2)) //8bit adc,1/2
  18          #define c_ucAdc_data_low_bat  ((34*256)/(33*2)) //8bit adc,1/2
  19          
  20          
  21          static u8 ucBat_low;
  22          static u8 ucDC_input;
  23          static u8 ucCHRG_full;
  24          
  25          static u8 ucAdc_bat_data;
  26          
  27          
  28          void App_charge_bat_init(void)
  29          {
  30   1          ucAdc_bat_data = 0xff;
  31   1          
  32   1        ucDC_input = 0;
  33   1        ucCHRG_full = 0;
  34   1          ucBat_low = 0;    
  35   1      }
  36          
  37          static void bat_adc_data(void)
  38          {
  39   1          static xdata u8 ucTime = 0;
  40   1          static xdata u16 uwAdc_add = 0;
  41   1          static xdata u8 ucAdc_cnt = 0;
  42   1          u16 uwAdc_tmp;
  43   1      
  44   1          ucTime++;
  45   1          if(ucTime >= 40)
  46   1          {
  47   2              ucTime = 0;
  48   2              
  49   2            uwAdc_tmp = (Adc_Data_Get()>>4);   //8bit
  50   2      
  51   2              uwAdc_add += uwAdc_tmp;
  52   2              ucAdc_cnt++;
  53   2              if(ucAdc_cnt >= 8)
C51 COMPILER V9.60.0.0   APP_CHARGE_BAT                                                    03/08/2021 17:08:26 PAGE 2   

  54   2              {
  55   3                  ucAdc_cnt = 0;
  56   3      
  57   3                  ucAdc_bat_data = (u8)(uwAdc_add/8);
  58   3                  uwAdc_add = 0;
  59   3              }
  60   2          }
  61   1      }
  62          
  63          u8 BAT_low_status(void)
  64          {
  65   1          return ucBat_low;
  66   1      }
  67          
  68          u8 DC_input_status(void)
  69          {
  70   1          return ucDC_input;
  71   1      }
  72          
  73          static void DC_input_check(void)
  74          {
  75   1          static xdata u8 ucInput_Time_cnt1 = 0;
  76   1          static xdata u8 ucInput_Time_cnt2 = 0;
  77   1        static xdata u8 ucCHRG_Time_cnt1 = 0;
  78   1          static xdata u8 ucCHRG_Time_cnt2 = 0;
  79   1          static xdata u16 uwBat_Low_off_time = 0;
  80   1          static xdata u8 ucTime_cnt_1S = 0;
  81   1      
  82   1          //
  83   1          if(0 == a_iDC_Input)
  84   1          {
  85   2              //充电器接入
  86   2              ucInput_Time_cnt2 = 0;
  87   2              ucInput_Time_cnt1++;
  88   2              if(ucInput_Time_cnt1 >= 50)
  89   2              {
  90   3                  ucInput_Time_cnt1 = 0;
  91   3                  ucDC_input = 1;
  92   3                  app_bt_shut_down_time_clr();        //接入充电器不让蓝牙15分钟关机
  93   3              }
  94   2          }
  95   1          else
  96   1          {
  97   2              //充电器拿开
  98   2              ucInput_Time_cnt1 = 0;
  99   2              ucInput_Time_cnt2++;
 100   2              if(ucInput_Time_cnt2 >= 50)
 101   2              {
 102   3                  ucInput_Time_cnt2 = 0;
 103   3                  ucDC_input = 0;
 104   3              }
 105   2          }
 106   1        
 107   1        //
 108   1          if(1 == a_iCHRG_Check)
 109   1          {
 110   2              //充电中
 111   2              ucCHRG_Time_cnt2 = 0;
 112   2              ucCHRG_Time_cnt1++;
 113   2              if(ucCHRG_Time_cnt1 >= 50)
 114   2              {
 115   3                  ucCHRG_Time_cnt1 = 0;
C51 COMPILER V9.60.0.0   APP_CHARGE_BAT                                                    03/08/2021 17:08:26 PAGE 3   

 116   3                  ucCHRG_full = 0;
 117   3              }
 118   2          }
 119   1          else
 120   1          {
 121   2              //充满
 122   2              ucCHRG_Time_cnt1 = 0;
 123   2              ucCHRG_Time_cnt2++;
 124   2              if(ucCHRG_Time_cnt2 >= 50)
 125   2              {
 126   3                  ucCHRG_Time_cnt2 = 0;
 127   3                  ucCHRG_full = 1;
 128   3              }
 129   2          }
 130   1        
 131   1        //判断充电状态
 132   1        if(1 == ucDC_input)
 133   1        {
 134   2          //充电器接入
 135   2          BAT_led_mode(E_DC_BAT_LED_MODE_OFF);  //红led 关闭
 136   2          if(1 == ucCHRG_full)
 137   2          {
 138   3            //充满
 139   3            DC_led_mode(E_DC_BAT_LED_MODE_ON);  //绿led 常亮
 140   3          }
 141   2          else
 142   2          {
 143   3            //充电中
 144   3            DC_led_mode(E_DC_BAT_LED_MODE_DISP);  //绿led 慢闪
 145   3          }
 146   2      
 147   2              uwBat_Low_off_time = 0;
 148   2              ucBat_low = 0;
 149   2        }
 150   1        else
 151   1        {
 152   2          //充电器未接
 153   2              ucCHRG_full = 0;
 154   2          DC_led_mode(E_DC_BAT_LED_MODE_OFF); //绿led 关闭
 155   2      
 156   2              if(ucAdc_bat_data > c_ucAdc_data_high_bat)
 157   2              {
 158   3                  //电量充足
 159   3                  BAT_led_mode(E_DC_BAT_LED_MODE_OFF);  //红led 关闭
 160   3                  uwBat_Low_off_time = 0;
 161   3                  ucBat_low = 0;
 162   3              }
 163   2              else if(ucAdc_bat_data < c_ucAdc_data_low_bat)
 164   2              {
 165   3                  //电量低
 166   3                  BAT_led_mode(E_DC_BAT_LED_MODE_DISP); //红led 慢闪
 167   3                  ucBat_low = 1;
 168   3      
 169   3                  //计时关闭
 170   3                  ucTime_cnt_1S++;
 171   3                  if(ucTime_cnt_1S >= c_ucTime_cnt_1S)
 172   3                  {
 173   4                      ucTime_cnt_1S = 0;
 174   4                      
 175   4                      uwBat_Low_off_time++;
 176   4                      if(uwBat_Low_off_time >= c_uwBat_Low_off_time)
 177   4                      {
C51 COMPILER V9.60.0.0   APP_CHARGE_BAT                                                    03/08/2021 17:08:26 PAGE 4   

 178   5                          uwBat_Low_off_time = 0;
 179   5      
 180   5                          app_bt_send_key_long(); //通知蓝牙准备关机，等待返回关闭命令
 181   5                          pwr_off_set();          //自身延时强制关机
 182   5                      }
 183   4                  }
 184   3              }
 185   2        }
 186   1      
 187   1      }
 188          
 189          
 190          void App_charge_bat_server(void)
 191          { 
 192   1          bat_adc_data();
 193   1          DC_input_check();
 194   1      
 195   1          if(2 == pwr_on_status() || 1 == DC_input_status())
 196   1          {
 197   2              DC_BAT_led_ctrl();
 198   2          }
 199   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    382    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
